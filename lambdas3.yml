AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation for recommendation system UAT
Parameters:
  LambdaFunction1:
    Type: String
    Default: data-extraction
  S3Bucket:
    Description: use to upload lambda function zip 
    Type: String
    Default: recommendationssystembucketdata1234567
  ScheduleExpression:
      Description: time to run lambda
      Type: String
      Default: cron(0 2 * * ? *)
Resources:
  ExecutionLambda:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-recommendation-system
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  lambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda-extraction 
      FunctionName: !Ref LambdaFunction1
      Handler: src/mongodb_to_s3.run
      MemorySize: 256
      Role: !GetAtt 'ExecutionLambda.Arn'
      Runtime: python3.8
      Timeout: 600
      Code:
        ZipFile: |
         def my_handler(event, context):
            message = 'Hello Lambda World!'
            return message

  S3BucketZip:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3Bucket

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule for lambada data-extraction"
      ScheduleExpression: !Ref ScheduleExpression
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "lambdaFunction1"
              - "Arn"
          Id: "TargetFunctionV1"
  
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "lambdaFunction1"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"
